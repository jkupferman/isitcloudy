= Whois

Whois is an intelligent pure Ruby WHOIS client and parser.

It is a OS-independent library and doesn't require external C libraries or Gems: it is a 100% Ruby software with all the advantages and disadvantages that it involves.

This software was developed to power {RoboDomain}[http://www.robodomain.com] and, since July 2009, it ran more than thousands requests.

An extensive test suite is available to verify the library correctness but you must be aware that registrant might change Whois interfaces without notice and at any time causing queries to specific hosts to stop working.


== Features

* Pure Ruby library without any external dependency other than Ruby itself
* Intelligent Ruby client
* Flexible and extensible configuration with support for user-defined servers
* Powerful whois response parser
* Support for IPv6, IPv4, TLD and domain WHOIS queries
* Object oriented design
* Compatible with Ruby 1.8.6 and newer, including Ruby 1.9


== Requirements

* Ruby >= 1.8.6

Whois has been {successfully tested}[http://www.ruby-whois.org/manual/installation.html] against the following Ruby platforms:

* Ruby 1.8.6 / 1.8.7 / 1.9.1 / 1.9.2
* MacRuby
* Ruby Enterprise Edition

Do you run any other Ruby platform or version? Are you experiencing any problem? Join our {discussion group}[http://groups.google.com/group/ruby-whois].


== Installation

This library is intended to be installed as a Gem.

  $ gem install whois

You might need administrator privileges on your system to install it.


== Getting Started

Note. This section covers only the essentials for getting started with the Whois library. The {documentation}[http://www.ruby-whois.org/documentation.html] provides a more accurate explanation including tutorials, more examples and technical details about the client/server/answer/parser architecture.

=== Querying the Server

Whois provides the ability to get WHOIS information for TLD, domain names, IPv4 and IPv6 addresses. The client is smart enough to guess the best WHOIS server according to given query, send the request and return the response.

Check out the following examples:

  # Domain WHOIS
  w = Whois::Client.new
  w.query("google.com")
  # => #<Whois::Answer>

  # TLD WHOIS
  w = Whois::Client.new
  w.query(".com")
  # => #<Whois::Answer>

  # IPv4 WHOIS
  w = Whois::Client.new
  w.query("74.125.67.100")
  # => #<Whois::Answer>

  # IPv6 WHOIS
  w = Whois::Client.new
  w.query("2001:db8::1428:57ab")
  # => #<Whois::Answer>

The query method is stateless. For this reason, you can safely re-use the same client instance for multiple queries.

  w = Whois::Client.new
  w.query("google.com")
  w.query(".com")
  w.query("74.125.67.100")
  w.query("2001:db8::1428:57ab")
  w.query("google.it")

If you just need a WHOIS response and you don't care about a full control of the WHOIS Client, <tt>Whois</tt> comes with a simple method called whois. This is the simplest way to send a WHOIS request.

  Whois.whois("google.com")
  # => #<Whois::Answer>

Did I mention you can even use blocks?

  Whois::Client.new do |w|
    w.query("google.com")
    w.query(".com")
    w.query("74.125.67.100")
    w.query("2001:db8::1428:57ab")
    w.query("google.it")
  end


=== Consuming the Answer

As of release 0.8, a WHOIS query no longer returns a simple string. Instead, you get a full <tt>Whois::Answer</tt> instance and this is just the beginning of the story.

<tt>Whois::Answer</tt> is a super powerful object. It encapsulates the full WHOIS answer and it provides you the ability to parse the WHOIS response with a full object oriented notation.

  a = Whois.whois("google.it")
  # => #<Whois::Answer>
  
  a.available?
  # => false
  a.registered?
  # => true
  
  a.created_on
  # => Fri Dec 10 00:00:00 +0100 1999
  
  t = a.technical
  # => #<Whois::Answer::Contact>
  t.id
  # => "TS7016-ITNIC"
  t.name
  # => "Technical Services"
  
  a.nameservers.each do |nameserver|
    puts nameserver
  end

This feature is made possible by the <tt>Whois</tt> answer parsers. Unfortunately, due to the lack of a global standard, each WHOIS server requires a specific parser. For this reason, the library doesn't support all existing WHOIS servers.

If you create a new parser, please consider releasing it to the public so that it can be included in a next version.

=== Timeout

By default, each query run though the client has a timeout value of 5 seconds. If the execution exceeds timeout limit, the client raises a <tt>Timeout::Error</tt> exception.

Off course, you can customize the timeout value setting a different value. If timeout is <tt>nil</tt>, the client will until the response is sent back from the server or the process is killed. Don't disable the timeout unless you really know you are doing!

  w = Whois::Client.new(:timeout => 10)
  w.timeout # => 10
  w.timeout = 5
  w.timeout # => 5
  
  w.query("google.com")


== Acknowledgments

First of all, I would like to express my most sincere thanks to Cyril Mougel, the author of the first Ruby Whois GEM that has been available since 2007. Cyril has been kind enough to yield me the privilege of using the RubyForge Whois project and the Whois package name to publish this library. To express all my gratitude, the release 0.5.0 and all sub sequential versions of the new Whois up to 0.9.x are 100% compatible with Cyril's Whois.

Whois is largely inspired by other notable Whois projects, most of all the Debian Whois library written and maintained by Marco D'Itri. Other good ideas and design decisions come from the PERL Net::DRI package.

I would lie if I say I'm completely unaware of the other Ruby Whois projects. Before starting this Ruby Whois library I deeply investigated the available resources and, despite none of them was a good candidate for a refactoring, some of them expose a really cool API.
They didn't directly influence this library or any design decision, but they have been a really interesting code-reading.

The parser architecture has been inspired by the PHPWhois[http://phpwhois.sourceforge.net/] project. The authors puts lot of effort to create whois-specific parsers normalizing the different responses in a single tree-based structure. So far, this is the only one opensource project that offers such this feature in all the programming language ecosystem.

Despite I spent weeks reading source code from the available whois libraries, Ruby Whois has been built from scratch trying to focus on long-term maintainability and flexibility and cannot be considered a Ruby port of any of other existing Whois libraries.


== Note for Whois 0.4 users

As of release 0.5.0, the Whois GEM has been completely rewritten. As I explained in the Acknowledgment section, Cyril Mougel (the author of the original Whois package) yield me the privilege to use the Whois RubyForge project for my new Whois client.

All versions between Whois 0.5.0 and 0.9.x include a compatibility adapter and the corresponding deprecation warnings to help you migrate to the new API. Starting from Whois 1.0.0, the library is no longer backward compatible with Cyril's Whois.


== Author

Author:: {Simone Carletti}[http://www.simonecarletti.com/] <weppos@weppos.net>


== Thanks to

Everyone {in this list}[http://github.com/weppos/whois/contributors].


== FeedBack and Bug reports

If you use this library and find yourself missing any functionality I have missed, please {let me know}[mailto:weppos@weppos.net].

Bug reports and Feature suggestions {are welcomed}[http://github.com/weppos/whois/issues].


== More

* {Homepage}[http://www.ruby-whois.org]
* {GitHub Repository}[http://github.com/weppos/whois]
* {API Documentation}[http://www.ruby-whois.org/api/]
* {Discussion Group}[http://groups.google.com/group/ruby-whois]


== Changelog

See the CHANGELOG.rdoc file for details.


== License

Copyright (c) 2009-2010 Simone Carletti, Whois is released under the MIT license.

